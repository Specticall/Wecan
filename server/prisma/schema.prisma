// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name  String
  password String?
  pictureURL String?
  
  lastLogin DateTime @default(now())
  hasCreatedDiaryToday Boolean

  point Point?
  mood Mood
  streak Int?

  // DEPRECATED
  // Keeps track of any tasks that was deleted and has not beens shown to the user yet.
  // This data gets reset to 0 after a user is notified of the task deletion (sent manually the from client)
  unannouncedExpiredTaskCount Int @default(0)

  // Checks if the user has created a goal that's on going (in progress). This is used to notify a user if they should / can create a new goal.
  hasOnGoingGoal Boolean @default(false)

  // Checks if the user has completed the onboarding form 
  hasOnboarded Boolean @default(false)

  
  diaries Diary[]
  tasks Task[]


  goals Goal[]
  
}

model Point {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId

  earnedToday Int @default(0)
  targetToday Int @default(0)

  earnedOverall Int @default(0)
  
  user User @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Goal {
  id String  @id @default(auto()) @map("_id") @db.ObjectId

  target Int @default(0)
  earned Int @default(0)

  createdAt DateTime @default(now())
  status Status @default(OnGoing)

  user User @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  task Task[]
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  points Int
  title String
  description String
  mood Mood
  status Status @default(OnGoing)
  
  user User @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  
  goal Goal @relation(fields: [goalId], references: [id])
  goalId String @db.ObjectId
  
  createdAt DateTime @default(now())
  completedAt DateTime?


}

model Diary {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  dateCreated DateTime @default(now())
  content String
}

enum Status {
  Completed
  OnGoing
}



enum Mood {
  Ecstatic
  Happy
  Neutral
  Sad
  Depressed
  Unknown
}

model AvailableTask {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  points Int
  title String
  description String
  mood Mood
}
