// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name  String
  password String?
  pictureURL String?
  
  lastLogin DateTime @default(now())

  // DEPRECATED
  // hasCreatedDiaryToday Boolean

  point Point?
  mood Mood
  streak Int?

  diaryStreak Int @default(0)

  // DEPRECATED
  // Keeps track of any tasks that was deleted and has not beens shown to the user yet.
  // This data gets reset to 0 after a user is notified of the task deletion (sent manually the from client)
  // unannouncedExpiredTaskCount Int @default(0)

  // Checks if the user has created a goal that's on going (in progress). This is used to notify a user if they should / can create a new goal.
  hasOnGoingGoal Boolean @default(false)

  // Checks if the user has completed the onboarding form 
  hasOnboarded Boolean @default(false)

  // Checks if the user has set their mood for the current day (this is used to prompt the user to set their mood on the first log of the day)
  hasSetMoodToday Boolean @default(false)
  
  diaries Diary[]
  tasks Task[]
  goals Goal[]

  // Background stuff
  ownedBackground UserBackground[]
  selectedBackgroundURL String
}

// Acts as an intermediary relation table to the background and user mode. A User can have multiple backgrounds. The backgrounds are manually seeded to users share the same seeded background data. 
model UserBackground {
  id String  @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  backgroundId String @db.ObjectId
  background Background @relation(fields: [backgroundId], references: [id])
}

model Background {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  URL   String
  name  String
  tier  Int

  users UserBackground[]
}

model Point {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId

  earnedToday Int @default(0)
  targetToday Int @default(0)

  earnedOverall Int @default(0)
  
  user User @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
}

model Goal {
  id String  @id @default(auto()) @map("_id") @db.ObjectId

  target Int @default(0)
  earned Int @default(0)

  createdAt DateTime @default(now())
  status Status @default(OnGoing)

  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  task Task[]
  history History[]

  taskCompleted Int @default(0)
  averageMood Mood @default(Unknown)
  completionPercent Int @default(0)

  difficulty Difficulty @default(Easy)

  points Int @default(0)

  // This field will contain the name of a randomized background whenever the user has completed a task.
  // Once the user has claimed the prize, this field will go back to null. 
  backgroundRewardId String?

  // This field in particular is used to tell the client to display some sort of UI effects that indicates the user that they have an unclaimed prize. The reason we split `backgroundReward` and `hasClaimedReward` is because there are cases when the user has obtained all the backgrounds which means they're not getting anything however, the UI still needs to display their "unclaimed reward".
  hasClaimedReward Boolean @default(false)
}

// Displays the user's activty on a certain day (points earned, mood, etc...). Used to display data on the statistics page. Will be reset every new day.
model History {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  
  goal Goal @relation(fields: [goalId], references: [id])
  goalId String @db.ObjectId

  date DateTime @default(now()) 
  status Status @default(OnGoing)

  pointsEarned Int @default(0)
  taskCompleted Int @default(0)
  mood Mood @default(Unknown)

  completionPercent Int @default(0)
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  points Int
  title String
  description String
  mood Mood
  status Status @default(OnGoing)
  
  user User @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  
  goal Goal @relation(fields: [goalId], references: [id])
  goalId String @db.ObjectId
  
  createdAt DateTime @default(now())
  completedAt DateTime?


}

model Diary {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  dateCreated DateTime @default(now())
  content String
}

enum Status {
  Completed
  OnGoing
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum Mood {
  Ecstatic
  Happy
  Neutral
  Sad
  Depressed
  Unknown
}

model AvailableTask {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  points Int
  title String
  description String
  mood Mood
}
